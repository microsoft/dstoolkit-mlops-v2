name: ModelFactory-Terraform-Deployment
on: [workflow_dispatch]

env:
  LOCATION: ${{ vars.LOCATION }}
  TFSTATE_RESOURCE_GROUP_NAME: ${{ vars.TFSTATE_RESOURCE_GROUP_NAME }}
  TFSTATE_STORAGE_ACCT_NAME: ${{ vars.TFSTATE_STORAGE_ACCT_NAME }}
  ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
  ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
  SUBSCRIPTION_ID: ${{ vars.SUBSCRIPTION_ID }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: login
        uses: Azure/login@v2
        with:
          client-id: ${{ vars.ARM_CLIENT_ID }}
          tenant-id: ${{ vars.ARM_TENANT_ID }}
          subscription-id: ${{ vars.SUBSCRIPTION_ID }}

      - name: Add tfstate resource group
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.SUBSCRIPTION_ID }}  
      - run: |
          az --version
          az group create --location '${{ env.LOCATION }}' --name '${{ env.TFSTATE_RESOURCE_GROUP_NAME }}'

      - name: Add tfstate account
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.SUBSCRIPTION_ID }}  
      - run: |
          az storage account create --name '${{ env.TFSTATE_STORAGE_ACCT_NAME }}' --resource-group '${{ env.TFSTATE_RESOURCE_GROUP_NAME }}' --sku Standard_LRS

      - name: Add terraform container
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.SUBSCRIPTION_ID }}  
      - run: |
          az storage container create --name terraform --account-name '${{ env.TFSTATE_STORAGE_ACCT_NAME }}'

      - name: Terraform Install
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest
      
      - name: List current directory contents
        run: ls ${{ github.workspace }}

      - name: Terraform Init
        env:
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ vars.SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}  
        if: true
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.TFSTATE_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ env.TFSTATE_STORAGE_ACCT_NAME }}" \
            -backend-config="container_name=terraform" \
            -backend-config="key=mlops.tfstate"
        working-directory: ${{ github.workspace }}/infra/terraform/public_workspace

      - name: Terraform Validate
        env:
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ vars.SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }} 
        if: true
        working-directory: ${{ github.workspace }}/infra/terraform/public_workspace
        run: |
            terraform validate
        
      - name: Terraform Plan
        env:
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ vars.SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}     
        if: true
        run: | 
            terraform plan -out=tfplan
        working-directory: ${{ github.workspace }}/infra/terraform/public_workspace

      - name: Terraform Apply
        env:
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ vars.SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }} 
        if: true
        run: |
            terraform apply -auto-approve -input=false tfplan
        working-directory: ${{ github.workspace }}/infra/terraform/public_workspace

      # Capture Terraform Outputs and set them as environment variables
      - name: Capture Terraform Outputs
        id: tf_outputs
        run: |
          echo "Fetching Terraform Outputs..."
          app_insights_name=$(terraform output -raw app_insights_name)
          client_id=$(terraform output -raw client_id)
          container_registry_name=$(terraform output -raw container_registry_name)
          key_vault_name=$(terraform output -raw key_vault_name)
          storage_account_name=$(terraform output -raw storage_account_name)
          tenant_id=$(terraform output -raw tenant_id)
          workspace_name=$(terraform output -raw workspace_name)

      - name: Verify Environment Variables
        run: |
          echo "App Insights: ${{ env.app_insights_name }}"
          echo "Client ID: ${{ env.client_id }}"
          echo "Container Registry: ${{ env.container_registry_name }}"
          echo "Key Vault: ${{ env.key_vault_name }}"
          echo "Storage Account: ${{ env.storage_account_name }}"
          echo "Tenant ID: ${{ env.tenant_id }}"
          echo "Workspace: ${{ env.workspace_name }}"